attach(d)
grades
hist(d$grade)
hist(d$grade, bin=c(1:13))
hist(d$grade, bins=c(1:13))
hist(d$grade, breaks=c(1:13))
hist(d$grade, breaks=c(-2:13))
hist(grade, breaks=c(-2:13))
25000*130
2900000/130
?apply
load("/Users/albin/PROJECTS/cellcycle_trial/methyl_clustering/heatmap_methyl.RData")
ls()
summary(heat.obj)
summary(methyl.fc)
dim(methyl.fc)
library(cluster)
?k.mediods
clarax<-clara(methyl.fc, k=10)
plot(clarax)
summary(clarax)
summary(clarax$clustering)
clarax$clustering
summary(clarax)
clarax$mediods
clarax$medoids
plot(clarax$medoids)
image(clarax$medoids)
?image
barplot(clarax$medoids)
?barplot
barplot(clarax$medoids, beside=T)
barplot(t(clarax$medoids), beside=T)
barplot(t(clarax$medoids), beside=T, legend.text=T)
barplot(t(clarax$medoids), beside=T, legend.text=T, color=rainbow(6))
barplot(t(clarax$medoids), beside=T, legend.text=T, col=rainbow(6))
clarax$clusinfo
?clara
clarax$cluster
clarax$cluster[larax$cluster==7]
clarax$cluster[clarax$cluster==7]
dim(clarax$cluster[clarax$cluster==7])
length(clarax$cluster[clarax$cluster==7])
clarax$clusinfo
length(clarax$cluster[clarax$cluster==7])
clarax$cluster[clarax$cluster==7]
class(clarax$cluster[clarax$cluster==7])
names(clarax$cluster[clarax$cluster==7])
write.table(names(clarax$cluster[clarax$cluster==7]), file "test.txt")
write.table(names(clarax$cluster[clarax$cluster==7]), file="test.txt")
?write.table
write.table(names(clarax$cluster[clarax$cluster==7]), file="test.txt", quote=F)
write.table(names(clarax$cluster[clarax$cluster==7]), file="test.txt", quote=F, row.names=F)
names(clarax$cluster[clarax$cluster==10])
names(clarax$cluster[clarax$cluster==6])
ls()
head(methyl)
head(methyl.fc)
h.methyl.fc<-methyl.fc[4:6]
head(h.methyl.fc)
?apply
apply(h.methyl.fc, 1, var)
h,methyl.fc$var<-apply(h.methyl.fc, 1, var)
h.methyl.fc$var<-apply(h.methyl.fc, 1, var)
head(h.methyl.fc)
h.methyl.fc[order.list(h.methyl.fc$var),   ]
?order
h.methyl.fc[sort.list(h.methyl.fc$var),   ]
h.methyl.fc.sorted<-h.methyl.fc[sort.list(h.methyl.fc$var),   ]
plot (mean( .methyl.fc.sorted[1:3])
)
plot (mean( h.methyl.fc.sorted[1:3])
)
hist(h.methyl.fc.sorted$var)
hist(h.methyl.fc.sorted$var, breaks=1000)
hist(h.methyl.fc.sorted$var, breaks=1000, xllim=c(0,1))
hist(h.methyl.fc.sorted$var, breaks=1000, xlim=c(0,1))
hist(h.methyl.fc.sorted$var, breaks=100000, xlim=c(0,1))
h.methyl.fc$var<-apply(h.methyl.fc, 1, var)
h.methyl.fc<-methyl.fc[4:6]
v<- <-apply(h.methyl.fc, 1, var)
v<- apply(h.methyl.fc, 1, var)
m<- apply(h.methyl.fc, 1, mean)
h.methyl.fc.sorted<-h.methyl.fc[v/m),   ]
h.methyl.fc.sorted<-h.methyl.fc[sort.list(v/m),   ]
tail(h.methyl.fc.sorted)
tail(h.methyl.fc.sorted, n=10)
hist(v/m)
qqplot(v/m )
qplot(v/m )
library(ggplot)
library(ggplot2)
qplot(v/m )
qplot(v/m , binwidth=0.01)
?polygon
?melt
melted<-melt.array(h.methyl.fc.sorted)
head(melted)
melted<-melt.array(h.methyl.fc.sorted, varnames=c("hMeDIP_G1", "hMeDIP_S", "hMeDIP_G2M"))
melted<-melt.data.frame(h.methyl.fc.sorted)
head(melted)
melted<-melt.data.frame(h.methyl.fc.sorted, id.var="")
head(h.methyl.fc.sorted )
?names
?row.names
melted<-melt.data.frame(h.methyl.fc.sorted, id.var=row.names(h.methyl.fc.sorted))
row.names(h.methyl.fc.sorted))
 h.methyl.fc.sorted$name<- row.names(h.methyl.fc.sorted)
head(h.methyl.fc.sorted )
melted<-melt.data.frame(h.methyl.fc.sorted, id.var=name)
melted<-melt.data.frame(h.methyl.fc.sorted, id.var=h.methyl.fc.sorted$name)
melted<-melt.data.frame(h.methyl.fc.sorted, measure.vars=1:3)
head(melted)
meledt[name=="ENST00000316824.2", ]
melted[name=="ENST00000316824.2", ]
melted[medlted$name=="ENST00000316824.2", ]
melted[melted$name=="ENST00000316824.2", ]
n <- 100#
xx <- c(0:n, n:0)#
yy <- c(c(0,cumsum(stats::rnorm(n))), rev(c(0,cumsum(stats::rnorm(n)))))#
plot   (xx, yy, type="n", xlab="Time", ylab="Distance")#
polygon(xx, yy, col="gray", border = "red")#
title("Distance Between Brownian Motions")
x <- c(1:9,8:1)#
y <- c(1,2*(5:3),2,-1,17,9,8,2:9)#
op <- par(mfcol=c(3,1))#
for(xpd in c(FALSE,TRUE,NA)) {#
  plot(1:10, main = paste("xpd =", xpd))#
  box("figure", col = "pink", lwd=3)#
  polygon(x,y, xpd=xpd, col="orange", lty=2, lwd=2, border="red")#
}#
par(op)
plot(c(100, 200), c(300, 450), type= "n", xlab="", ylab="")#
rect(100, 300, 125, 350) # transparent#
rect(100, 400, 125, 450, col="green", border="blue") # coloured#
rect(115, 375, 150, 425, col=par("bg"), border="transparent")#
rect(150, 300, 175, 350, density=10, border="red")#
rect(150, 400, 175, 450, density=30, col="blue",#
     angle=-30, border="transparent")#
#
legend(180, 450, legend=1:4, fill=c(NA, "green", par("fg"), "blue"),#
       density=c(NA, NA, 10, 30), angle=c(NA, NA, 30, -30))#
#
par(op)
library(lattice)''
library(lattice)
parallel(~h.methyl.fc.sorted)
head(h.methyl.fc.sorted)
parallel(~h.methyl.fc.sorted[c(1:3)])
parallel(~h.methyl.fc.sorted[c(1:3)], lty=1, alpha=0.05)
parallel(~h.methyl.fc.sorted[c(1:3), 1:100])
parallel(~h.methyl.fc.sorted[1:100, c(1:3)])
dim(h.methyl.fc.sorted)
parallel(~h.methyl.fc.sorted[10000:10861, c(1:3)])
parallel(~h.methyl.fc.sorted[10800:10861, c(1:3)])
parallel(~h.methyl.fc.sorted[10860:10861, c(1:3)])
parallel(~h.methyl.fc.sorted[10830:10861, c(1:3)])
parallel(~h.methyl.fc.sorted[10835:10861, c(1:3)])
?paralell
?parallel
?panel.parallel
parallel(~h.methyl.fc.sorted[10835:10861, c(1:3)], common.scale=T)
parallel(~h.methyl.fc.sorted[10800:10861, c(1:3)], common.scale=T)
parallel(~h.methyl.fc.sorted[10800:10861, c(1:3)], common.scale=T, col="black")
parallel(~h.methyl.fc.sorted[10800:10861, c(1:3)], common.scale=T, col="black", alpha=0.05)
parallel(~h.methyl.fc.sorted[10800:10861,'' c(1:3)], common.scale=T, col="black", alpha=0.05)
x<-(1,2,3)
x<-c(1,2,3)
y<-c(2,3,5)
polygon(x, y)
plot (x, y)
polygon(x, y)
polygon(y, x)
plot(c(1,9), 1:2, type="n")#
polygon(1:9, c(2,1,2,1,1,2,1,2,1),#
        col=c("red", "blue"),#
        border=c("green", "yellow"),#
        lwd=3, lty=c("dashed", "solid"))
plot_many<-function(input){# assumes that we are given six values where the three first are the x axis values# also assumes nice plotting stricture Is in place	x<-input[1:3]	y<-input[4:6]	polygon(x, y)}
ls()
head(methyl.fc)
max(methyl.fc)
mean(methyl.fc)
plot(1:3)
apply(methyl.fc[, 1:10], 1, plot_many)
apply(methyl.fc[,1:10], 1, plot_many)
methyl.fc[,1:10]
apply(methyl.fc[1:10, ], 1, plot_many)
min(methyl.fc)
apply(methyl.fc[0:10, ], 1, plot_many)
plot(-1:3)
apply(methyl.fc[1:10, ], 1, plot_many)
apply(methyl.fc[1:100, ], 1, plot_many)
plot(-1:3, -1:3)
apply(methyl.fc[1:100, ], 1, plot_many)
plot(-1:10, -1:10)
apply(methyl.fc[1:100, ], 1, plot_many)
apply(methyl.fc[1:1000, ], 1, plot_many)
plot(-1:100, -1:100)
apply(methyl.fc[1:1000, ], 1, plot_many)
plot(-1:20, -1:20, col="white")
apply(methyl.fc[1:1000, ], 1, plot_many)
apply(methyl.fc, 1, plot_many)
plot(-1:20, -1:20, col="white", ylab="medip",xlab="hMedip" )
apply(methyl.fc, 1, plot_many)
plot(-1:20, -1:20, col="white", ylab="medip",xlab="hMedip" ,alpha=0.05)
plot(-1:20, -1:20, col="white", ylab="medip",xlab="hMedip")
apply(methyl.fc, 1, plot_many)
plot(-1:20, -1:20, col="white", ylab="medip",xlab="hMedip", ylim=c(-1, 30))
apply(methyl.fc, 1, plot_many)
plot_many<-function(input){# assumes that we are given six values where the three first are the x axis values# also assumes nice plotting stricture Is in place	x<-input[1:3]	y<-input[4:6]	polygon(x, y, alpa=0.05)}
apply(methyl.fc, 1, plot_many)
pdf("test.pdf")
plot_many<-function(input){# assumes that we are given six values where the three first are the x axis values# also assumes nice plotting stricture Is in place	x<-input[1:3]	y<-input[4:6]	polygon(x, y, alpa=0.05)}
apply(methyl.fc, 1, plot_many)
plot(-1:20, -1:20, col="white", ylab="medip",xlab="hMedip", ylim=c(-1, 30))
apply(methyl.fc, 1, plot_many)
dev.off()
?warnings
warnings()
plot_many<-function(input){# assumes that we are given six values where the three first are the x axis values# also assumes nice plotting stricture Is in place	x<-input[1:3]	y<-input[4:6]	polygon(x, y, alpha=0.05)}
plot(-1:20, -1:20, col="white", ylab="medip",xlab="hMedip", ylim=c(-1, 30))
apply(methyl.fc, 1, plot_many)
warnings()
ls()
apply(methyl.fc.log2, 1, plot_many)
plot(-1:20, -1:20, col="white", ylab="medip",xlab="hMedip", ylim=c(-1, 30))
apply(methyl.fc.log2, 1, plot_many)
plot(-1:20, -1:20, col="white", ylab="medip",xlab="hMedip", ylim=c(-1, 7), xlim=c(-1, 7))
apply(methyl.fc.log2, 1, plot_many)
plot(-1:20, -1:20, col="white", ylab="medip",xlab="hMedip", ylim=c(-1, 30))
apply(methyl.fc, 1, plot_many)
100/122
100/142
100/122
200000*100/122
300000*100/122
37500/3
183000/12265397
12265397/122,653,97
12265397/183000
demo(graphics)
plot(numeric(0), numeric(0),#
+      xlim = range(x)+c(-1,1)*xadd, ylim = range(y)+c(-1,1)*yadd,#
+      type = "n", ann = FALSE)
plot (cars)
pairs(iris)
hist (rnorm(100))
c(1:100+1)
?apply
install.packages("GMD")
install.packages("GMD_0.2.tgz")
d<-read.table ("patients_drugs.txt", h=T)
d
attach(d)
plot(1:100, d[,c("patient1")],col="green",type="l")#
lines(1:100, d[,c("patient3")],type="l")#
lines(1:100, d[,c("patient2")],col="blue")#
lines(1:100, d[,c("patient4")],col="red")
plot(1:100, d[,c("patient1")],col="green",type="l")#
lines(1:100, d[,c("patient3")],type="l")#
lines(1:100, d[,c("patient2")],col="blue")#
lines(1:100, d[,c("patient4")],col="red")
lot(d[,c("patient3")],col="green",type=“p")
lot(d[c("patient3")],col="green",type=“p")
lot(patient3,col="green",type=“p")
plot(patient3,col="green",type=“p")
plot(patient3,col="green",type="p")
points(patient2, col="blue")
points(patient1, col="red")
points(patient4, col="cyan")
par(mfrow=c(2,2))
hist(patient3)
hist(patient2)
hist(patient1)
hist(patient4)
par(mfrow=c(2,2))
hist(patient1, xlim=c(-1000, 1000))
hist(patient2, xlim=c(-1000, 1000))
hist(patient3, xlim=c(-1000, 1000))
hist(patient4, xlim=c(-1000, 1000))
install.packages("GMD")
use GMD
library(GMD)
80*3+38
22800*7
